{"version":3,"sources":["form.js","kid.js","people.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","handleChange","e","amount","target","value","setState","handleSubmit","preventDefault","spend","state","onSubmit","this","type","name","onChange","balance","React","Component","Kid","People","fetching","people","pets","number","superagent","get","response","body","results","map","person","idx","Math","random","val","App","withdraw","deposit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAmCeA,E,kDA/Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,aAAe,SAACC,GACd,IAAIC,EAASD,EAAEE,OAAOC,MACtB,EAAKC,SAAS,CAAEH,YAPC,EAUnBI,aAAe,SAACL,GACdA,EAAEM,iBAGF,EAAKR,MAAMS,MAAM,EAAKC,MAAMP,SAZ5B,EAAKO,MAAQ,CAAEP,OAAQ,MAFN,E,qDAkBjB,OACE,yCACE,uBAAMQ,SAAUC,KAAKL,aAArB,UACE,uBAAOM,KAAK,SAASC,KAAK,SAASC,SAAUH,KAAKX,eAClD,yBAAQY,KAAK,SAAb,qCAA+CD,KAAKZ,MAAMgB,QAA1D,0B,GAxBSC,IAAMC,WCeVC,E,uKAVX,OACE,yCACE,+BAAKP,KAAKZ,MAAMc,KAAhB,gBACA,cAAC,EAAD,CAAML,MAAOG,KAAKZ,MAAMS,MAAOO,QAASJ,KAAKZ,MAAMgB,iB,GALzCC,IAAMC,W,yCC4CTE,E,kDA3Cb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXW,UAAU,EACVC,OAAQ,GACRC,KAAM,CAAC,QAAS,UAChBC,OAAQ,EAAKxB,MAAMwB,QANJ,E,yLAWjBZ,KAAKN,SAAS,CAACe,UAAS,I,SACDI,IAAWC,IAAI,iC,OAAhCC,E,OACAL,EAASK,EAASC,KAAKC,SAAW,GACxCjB,KAAKN,SAAS,CAACgB,SAAQD,UAAS,I,qIAIhC,OACE,qCACA,6BAAKT,KAAKF,MAAMc,SACfZ,KAAKF,MAAMW,SAAW,sDAAiC,GACxD,6BAEIT,KAAKF,MAAMY,OAAOQ,KAAK,SAACC,EAAQC,GAC9B,OAAO,6BAAyBD,EAAOjB,MAAvBmB,KAAKC,eAK3B,6BAEItB,KAAKF,MAAMa,KAAKO,KAAK,SAACK,EAAKH,GACzB,OAAO,6BAAyBG,GAAhBF,KAAKC,sB,GAnCZjB,IAAMC,WC8BZkB,E,kDA3Bb,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IAMRqC,SAAW,SAAClC,GACV,EAAKG,SAAS,CAAEU,QAAS,EAAKN,MAAMM,QAAUb,KAR7B,EAWnBmC,QAAU,aATR,EAAK5B,MAAQ,CACXM,QAAS,KAHM,E,qDAcjB,OACE,yCACE,oDAAuBJ,KAAKF,MAAMM,WAClC,uBACA,cAAC,EAAD,CAAKP,MAAOG,KAAKyB,SAAUvB,KAAK,OAAOE,QAASJ,KAAKF,MAAMM,UAC3D,uBACA,cAAC,EAAD,CAAQQ,OAAQ,Y,GAtBNP,IAAMC,WCOTqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.05338424.chunk.js","sourcesContent":["import React from 'react';\n\nclass Form extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { amount: null }\n  }\n\n  handleChange = (e) => {\n    let amount = e.target.value;\n    this.setState({ amount })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // <Zach spend={someFunction} />\n    // this.props.xxxxxx = whatever things we added to the component call\n    this.props.spend(this.state.amount);\n  }\n\n  render() {\n    return (\n      <> {/* this is the <Form /> or C3 from our drawing */}\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"number\" name=\"amount\" onChange={this.handleChange} />\n          <button type=\"submit\">Buy Something, You have {this.props.balance} remaining</button>\n        </form>\n      </>\n    )\n  }\n\n}\n\n\nexport default Form;\n","import React from 'react';\n\nimport Form from './form.js';\n\n// let zach = new Zach({spend:this.withdra, age: 21, name: 'z-man'})\nclass Kid extends React.Component {\n  render() {\n    return (\n      <> {/* this is the <Kid />  or C1 from our drawing */}\n        <h2>{this.props.name} Component</h2>\n        <Form spend={this.props.spend} balance={this.props.balance} />\n      </>\n    )\n  }\n}\n\n\nexport default Kid;\n","import React from 'react';\n\nimport superagent from 'superagent';\n\nclass People extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fetching: false,\n      people: [],\n      pets: ['Rocky', 'Malcom'],\n      number: this.props.number\n    }\n  }\n\n  async componentDidMount() {\n    this.setState({fetching:true})\n    const response = await superagent.get('https://swapi.dev/api/people/');\n    const people = response.body.results || [];\n    this.setState({people, fetching:false})\n  }\n\n  render() {\n    return (\n      <>\n      <h2>{this.state.number}</h2>\n      {this.state.fetching ? <div>Getting people ....</div> : ''}\n      <ul>\n        {\n          this.state.people.map( (person, idx) => {\n            return <li key={Math.random()}>{person.name}</li>\n          })\n        }\n      </ul>\n\n      <ul>\n        {\n          this.state.pets.map( (val, idx) => {\n            return <li key={Math.random()}>{val}</li>\n          })\n        }\n      </ul>\n      </>\n    )\n  }\n\n}\n\nexport default People;\n","import React from 'react';\n\nimport Kid from './kid.js';\nimport People from './people.js';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 100\n    }\n  }\n\n  withdraw = (amount) => {\n    this.setState({ balance: this.state.balance - amount})\n  }\n\n  deposit = () => {}\n\n  render() {\n    return(\n      <> {/* this is the <App /> */}\n        <h1>Bank Balance Is: ${this.state.balance}</h1>\n        <hr />\n        <Kid spend={this.withdraw} name=\"Zach\" balance={this.state.balance} />\n        <hr />\n        <People number={12} />\n      </>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}